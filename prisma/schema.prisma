datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String
  role     Role   @relation(fields: [roleId], references: [id])
  roleId   Int
  sales    Sale[]
}

model Customer {
  id_customer       Int                  @id @default(autoincrement())
  name              String
  email             String?              @unique
  phone             String?
  address           String?
  customer_type     String?
  sales             Sale[]
  credits           Credit[]
  accountsReceivable AccountsReceivable[]
}

model Inventory {
  id_product        Int            @id @default(autoincrement())
  name              String
  description       String?
  quantity          Int            @default(0)
  purchase_price    Float          // Precio de compra
  sale_price        Float          // Precio de venta
  purchase_date     DateTime?      // Fecha de compra
  image_url         String?        // URL de la imagen del producto
  id_category       Int
  category          Category       @relation(fields: [id_category], references: [id_category]) // Relación con categoría
  purchases         PurchaseDetail[] // Relación con PurchaseDetail
  sales             SaleDetail[]    // Relación con SaleDetail
}

model Category {
  id_category       Int            @id @default(autoincrement())
  name              String         @unique
  description       String?
  products          Inventory[]    // Relación con productos
}

model Purchase {
  id_purchase       Int            @id @default(autoincrement())
  purchase_date     DateTime       @default(now())
  total_purchase    Float
  details           PurchaseDetail[] // Relación con PurchaseDetail
}

model PurchaseDetail {
  id_purchase_detail Int            @id @default(autoincrement())
  quantity           Int
  unit_price         Float
  id_product         Int
  id_purchase        Int
  purchase           Purchase        @relation(fields: [id_purchase], references: [id_purchase])
  product            Inventory       @relation(fields: [id_product], references: [id_product])
}

model Sale {
  id_sale           Int            @id @default(autoincrement())
  sale_date         DateTime       @default(now())
  total_sale        Float
  sale_status       String         @default("Pending") // Example: 'pending', 'completed', 'canceled'
  id_customer       Int
  id_user           Int
  customer          Customer        @relation(fields: [id_customer], references: [id_customer])
  user              User            @relation(fields: [id_user], references: [id])
  saleDetails       SaleDetail[]
  analysis          SalesAnalysis?
}

model SaleDetail {
  id_sale_detail    Int            @id @default(autoincrement())
  quantity          Int
  unit_price        Float
  id_product        Int
  id_sale           Int
  product           Inventory       @relation(fields: [id_product], references: [id_product])
  sale              Sale            @relation(fields: [id_sale], references: [id_sale])
}

model Credit {
  id_credit         Int            @id @default(autoincrement())
  credit_amount     Float
  credit_balance    Float
  grant_date        DateTime       @default(now())
  due_date          DateTime?
  credit_status     String         @default("Active") // Example: 'active', 'paid', 'expired'
  id_customer       Int
  customer          Customer        @relation(fields: [id_customer], references: [id_customer])
  creditDetails     CreditDetail[]
}

model CreditDetail {
  id_credit_detail  Int            @id @default(autoincrement())
  payment_amount    Float
  remaining_balance Float
  payment_date      DateTime       @default(now())
  id_credit         Int
  credit            Credit          @relation(fields: [id_credit], references: [id_credit])
}

model AccountsReceivable {
  id_account        Int            @id @default(autoincrement())
  debt_amount       Float
  issue_date        DateTime       @default(now())
  due_date          DateTime?
  account_status    String         @default("Pending") // Example: 'pending', 'paid', 'overdue'
  id_customer       Int
  customer          Customer        @relation(fields: [id_customer], references: [id_customer])
}

model SalesAnalysis {
  id_analysis       Int            @id @default(autoincrement())
  analysis_date     DateTime       @default(now())
  total_sale        Float
  quantity_sold     Int
  id_sale           Int            @unique
  sale              Sale            @relation(fields: [id_sale], references: [id_sale])
}
