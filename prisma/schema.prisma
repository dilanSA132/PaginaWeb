datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  name     String
  password String // Contraseña, campo obligatorio
  role     Role   @relation(fields: [roleId], references: [id]) // Relación obligatoria
  roleId   Int    // roleId ya no puede ser nulo
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id           Int         @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   Int
  image        String?     // Campo para almacenar la imagen
  sales        SaleDetail[]
  orderDetails OrderDetail[]
}

model Order {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  name      String
  email     String
  phone     String 
  address   String
  details   OrderDetail[]
  status    OrderStatus   @default(PENDING) // Estado de la orden
  sale      Sale?         // Relación con Sale si la orden se convierte en una venta
}

enum OrderStatus {
  PENDING
  SOLD
}

model OrderDetail {
  id        Int        @id @default(autoincrement())
  quantity  Int
  amount    Float
  product   Product   @relation(fields: [productId], references: [id])
  productId Int
  sale      Sale?     @relation(fields: [saleId], references: [id]) // Relación opcional con Sale
  saleId    Int?      // Campo saleId ahora es opcional
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   Int
}

model Sale {
  id             Int           @id @default(autoincrement())
  date           DateTime      @default(now())
  totalAmount    Float
  paymentStatus  PaymentStatus
  paymentPlan    PaymentPlan?  @relation(fields: [paymentPlanId], references: [id])
  paymentPlanId  Int?
  details        SaleDetail[]
  orderDetails   OrderDetail[]
  paymentDetails PaymentDetail[] // Detalles de pago asociados a la venta
  originOrder    Order?         @relation(fields: [originOrderId], references: [id]) // Relación con la orden de origen
  originOrderId  Int?           @unique // ID de la orden original si aplica
}

enum PaymentStatus {
  PAID
  PENDING
  PARTIAL
}

model SaleDetail {
  id        Int      @id @default(autoincrement())
  quantity  Int
  amount    Float
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    Int
}

model PaymentDetail {
  id             Int          @id @default(autoincrement())
  sale           Sale         @relation(fields: [saleId], references: [id])
  saleId         Int
  paymentMethod  PaymentMethod // Método de pago utilizado
  amountPaid     Float        // Monto pagado
  paymentDate    DateTime     @default(now()) // Fecha del pago
}

enum PaymentMethod {
  CASH        // Efectivo
  TRANSFER    // Transferencia
}

model PaymentPlan {
  id          Int    @id @default(autoincrement())
  installments Int
  amount      Float
  sales       Sale[]
}
